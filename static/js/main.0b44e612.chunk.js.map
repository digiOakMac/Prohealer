{"version":3,"sources":["features/todos/actions.js","features/todos/reducer.js","store/root-reducer.js","features/todos/epics.js","store/root-epics.js","services/logger-service.js","services/index.js","store/index.js","features/common/components/Portrait.jsx","features/todos/components/TodosView.jsx","routes/home.jsx","serviceWorker.js","index.js"],"names":["addTodo","createAction","removeTodo","loadTodos","ping","pong","todos","createReducer","actions","state","action","push","payload","isPinging","todosReducer","combineReducers","rootReducer","app","pingEpic","action$","pipe","ofType","type","delay","mapTo","combineEpics","Object","values","todosEpics","log","console","logger","epicMiddleware","createEpicMiddleware","dependencies","services","store","configureStore","reducer","middleware","preloadedState","run","rootEpic","Image","styled","img","Portrait","prop","src","dispatchProps","connect","props","Button","onClick","id","title","JSON","stringify","Home","style","padding","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2XAEaA,EAAUC,YAAa,YACvBC,EAAaD,YAAa,eAC1BE,EAAYF,YAAa,cAEzBG,EAAOH,YAAa,QACpBI,EAAOJ,YAAa,QCHpBK,EAAQC,YAAc,IAAD,mBAC/BC,GAAkB,SAACC,EAAOC,GAAaD,EAAME,KAAKD,EAAOE,YAD1B,cAE/BJ,GAAqB,SAACC,EAAOC,OAFE,cAG/BF,GAAoB,SAACC,EAAOC,OAHG,IAMrBN,EAAOG,YAAc,CAAEM,WAAW,IAAd,mBAC9BL,GAAe,SAACC,EAAOC,GAAaD,EAAMI,WAAY,KADxB,cAE9BL,GAAe,SAACC,EAAOC,GAAaD,EAAMI,WAAY,KAFxB,IAUlBC,EALMC,0BAAgB,CACnCT,QACAF,SCTaY,EAJKD,0BAAgB,CAClCE,IAAKH,I,6CCAMI,EAAW,SAAAC,GAAO,OAAIA,EAAQC,KACzCC,YAAOjB,EAAKkB,MACZC,YAAM,KACNC,YAAMnB,OCJOoB,MAAY,WAAZ,cAAgBC,OAAOC,OAAOC,KCJ9B,GAAEC,IAAKC,QAAQD,KCEf,GACbE,UCGWC,EAAiBC,YAAqB,CACjDC,aAAcC,IAMVC,EAAQC,YAAe,CAC3BC,QAAStB,EACTuB,WAAY,CAACP,GACbQ,eANmB,KASrBR,EAAeS,IAAIC,GAGJN,Q,mKCnBf,IAAMO,E,OAAQC,EAAOC,IAAV,KAYIC,EANE,SAACC,GAChB,OACE,kBAACJ,EAAD,CAAOK,IAAK,4qBCDVC,EAAgB,CACpBjD,QAASQ,EACTJ,KAAMI,GAoBO0C,eA1BS,SAAAzC,GAAK,MAAK,CAChCH,MAAOG,EAAMQ,IAAIX,SAyBqB2C,EAAzBC,EAjBG,SAAAC,GAAU,IAClBnD,EAAyBmD,EAAzBnD,QAASM,EAAgB6C,EAAhB7C,MAAOF,EAAS+C,EAAT/C,KACxB,OACE,6BACE,sCACA,6BACE,kBAACgD,EAAA,EAAD,CAAQC,QAAS,kBAAMrD,EAAQ,CAAEsD,GAAI,EAAGC,MAAO,gBAA/C,YACA,kBAACH,EAAA,EAAD,CAAQC,QAAS,kBAAMjD,MAAvB,SAEF,kBAAC,EAAD,MACA,8BACGoD,KAAKC,UAAUnD,EAAO,EAAG,W,OCdnBoD,MARf,WACE,OACE,yBAAKC,MAAO,CAAEC,QAAS,QACrB,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDNC,iBAAO,mBARM,kBACX,6BACE,kBAAC,IAAD,CAAU9B,MAAOA,GACf,kBAAC,EAAD,UAKC,MAAU+B,SAASC,eAAe,SDkHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0b44e612.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit'\n\nexport const addTodo = createAction('ADD_TODO')\nexport const removeTodo = createAction('REMOVE_TODO')\nexport const loadTodos = createAction('LOAD_TODOS')\n\nexport const ping = createAction('PING')\nexport const pong = createAction('PONG')\n","import { combineReducers } from 'redux';\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport * as actions from \"./actions\";\n\nexport const todos = createReducer([], {\n  [actions.addTodo]: (state, action) => { state.push(action.payload)},\n  [actions.removeTodo]: (state, action) => {},\n  [actions.loadTodos]: (state, action) => {}\n})\n\nexport const ping = createReducer({ isPinging: false }, {\n  [actions.ping]: (state, action) => { state.isPinging = true },\n  [actions.pong]: (state, action) => { state.isPinging = false }\n})\n\nconst todosReducer = combineReducers({\n  todos,\n  ping\n})\n\nexport default todosReducer\n","import { combineReducers } from 'redux';\n\nimport todosReducer from '../features/todos/reducer';\n\nconst rootReducer = combineReducers({\n  app: todosReducer\n});\n\nexport default rootReducer;\n","import { delay, mapTo } from \"rxjs/operators\";\nimport { ofType } from 'redux-observable';\n\nimport { ping, pong } from \"./actions\";\n\nexport const pingEpic = action$ => action$.pipe(\n  ofType(ping.type),\n  delay(1000), // Asynchronously wait 1000ms then continue\n  mapTo(pong())\n);\n","import { combineEpics } from 'redux-observable';\n\nimport * as todosEpics from '../features/todos/epics';\n\nexport default combineEpics(...Object.values(todosEpics));\n","export default { log: console.log };\n","import * as logger from './logger-service';\n\nexport default {\n  logger\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { createEpicMiddleware } from 'redux-observable';\nimport rootReducer from './root-reducer';\nimport rootEpic from \"./root-epics\";\nimport services from \"../services\";\n\nexport const epicMiddleware = createEpicMiddleware({\n  dependencies: services\n})\n\nconst initialState = {};\n\n// create store\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: [epicMiddleware],\n  preloadedState: initialState\n});\n\nepicMiddleware.run(rootEpic)\n\n// export store singleton instance\nexport default store;\n","import React from 'react'\nimport styled from \"styled-components\";\n\nconst Image = styled.img`\n  border-radius: 50%;\n  width: 120px;\n  height: 120px;\n`\n\nconst Portrait = (prop) => {\n  return (\n    <Image src={'https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/d54c3396-71e6-4b08-b89b-23c8ad9b52c3/d92r5kq-20a51154-1b37-477b-b786-49f04975cadf.jpg/v1/fill/w_800,h_964,q_75,strp/nysot_by_ellrano_d92r5kq-fullview.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7ImhlaWdodCI6Ijw9OTY0IiwicGF0aCI6IlwvZlwvZDU0YzMzOTYtNzFlNi00YjA4LWI4OWItMjNjOGFkOWI1MmMzXC9kOTJyNWtxLTIwYTUxMTU0LTFiMzctNDc3Yi1iNzg2LTQ5ZjA0OTc1Y2FkZi5qcGciLCJ3aWR0aCI6Ijw9ODAwIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmltYWdlLm9wZXJhdGlvbnMiXX0.JS4qkBzbhXHCbDOzq4zE7jSzUHXQlPkqMqTMhZrrwhs'}></Image>\n  )\n}\n\nexport default Portrait","import React from 'react'\nimport { Button } from 'semantic-ui-react'\nimport Portrait from \"../../common/components/Portrait\";\nimport { connect } from 'react-redux'\nimport * as actions from '../actions'\n\nconst mapStateToProps = state => ({\n  todos: state.app.todos\n})\n\nconst dispatchProps = {\n  addTodo: actions.addTodo,\n  ping: actions.ping\n}\n\nconst TodosView = props => {\n  const { addTodo, todos, ping } = props\n  return (\n    <div>\n      <h3>Todo's</h3>\n      <div>\n        <Button onClick={() => addTodo({ id: 1, title: 'test todo'})}>Add todo</Button>\n        <Button onClick={() => ping()}>Ping</Button>\n      </div>\n      <Portrait />\n      <code>\n        {JSON.stringify(todos, 2, null)}\n      </code>\n    </div>\n  )\n}\n\nexport default connect(mapStateToProps, dispatchProps)(TodosView)\n","import React from 'react';\nimport TodosView from '../features/todos/components/TodosView'\nimport './home.css';\n\nfunction Home() {\n  return (\n    <div style={{ padding: '1em' }}>\n      <TodosView />\n    </div>\n  );\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store'\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport Home from './routes/home';\nimport * as serviceWorker from './serviceWorker';\n\nconst Root = () => (\n  <div>\n    <Provider store={store}>\n      <Home />\n    </Provider>\n  </div>\n);\n\nrender(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}