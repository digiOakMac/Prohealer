{"version":3,"sources":["features/player/images/darkElfMage.jpg","features/player/images/elfMage.png","features/player/images/priest.jpg","features/player/images/warrior.jpg","features/player/images/hunter.jpg","features/player/images/druid.jpg","features/todos/actions.js","features/todos/reducer.js","store/root-reducer.js","features/todos/epics.js","store/root-epics.js","services/logger-service.js","services/index.js","store/index.js","features/player/components/Player.jsx","features/player/images/index.js","features/player/playerClasses.js","features/party/components/Party.jsx","features/todos/components/TodosView.jsx","routes/home.jsx","serviceWorker.js","index.js"],"names":["module","exports","addTodo","createAction","removeTodo","loadTodos","ping","pong","todos","createReducer","actions","state","action","push","payload","isPinging","todosReducer","combineReducers","rootReducer","app","pingEpic","action$","pipe","ofType","type","delay","mapTo","combineEpics","Object","values","todosEpics","log","console","logger","epicMiddleware","createEpicMiddleware","dependencies","services","store","configureStore","reducer","middleware","preloadedState","run","rootEpic","PlayerItem","styled","Item","PlayerImage","Image","PlayerContent","Content","Player","props","playerClass","key","name","size","src","image","Meta","Description","Progress","progress","value","total","success","Images","freeze","ROGUE","MAGE","PRIEST","WARRIOR","HUNTER","DRUID","PlayerClasses","Party","Grid","textAlign","style","height","Column","maxWidth","Header","as","color","Group","map","Message","dispatchProps","connect","Home","padding","Boolean","window","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dc018c92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/darkElfMage.10fb5387.jpg\";","module.exports = __webpack_public_path__ + \"static/media/elfMage.17401227.png\";","module.exports = __webpack_public_path__ + \"static/media/priest.50fd2d51.jpg\";","module.exports = __webpack_public_path__ + \"static/media/warrior.3208cff0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hunter.5ce1bfe1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/druid.e70ca2f2.jpg\";","import { createAction } from '@reduxjs/toolkit'\n\nexport const addTodo = createAction('ADD_TODO')\nexport const removeTodo = createAction('REMOVE_TODO')\nexport const loadTodos = createAction('LOAD_TODOS')\n\nexport const ping = createAction('PING')\nexport const pong = createAction('PONG')\n","import { combineReducers } from 'redux';\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport * as actions from \"./actions\";\n\nexport const todos = createReducer([], {\n  [actions.addTodo]: (state, action) => { state.push(action.payload)},\n  [actions.removeTodo]: (state, action) => {},\n  [actions.loadTodos]: (state, action) => {}\n})\n\nexport const ping = createReducer({ isPinging: false }, {\n  [actions.ping]: (state, action) => { state.isPinging = true },\n  [actions.pong]: (state, action) => { state.isPinging = false }\n})\n\nconst todosReducer = combineReducers({\n  todos,\n  ping\n})\n\nexport default todosReducer\n","import { combineReducers } from 'redux';\n\nimport todosReducer from '../features/todos/reducer';\n\nconst rootReducer = combineReducers({\n  app: todosReducer\n});\n\nexport default rootReducer;\n","import { delay, mapTo } from \"rxjs/operators\";\nimport { ofType } from 'redux-observable';\n\nimport { ping, pong } from \"./actions\";\n\nexport const pingEpic = action$ => action$.pipe(\n  ofType(ping.type),\n  delay(1000), // Asynchronously wait 1000ms then continue\n  mapTo(pong())\n);\n","import { combineEpics } from 'redux-observable';\n\nimport * as todosEpics from '../features/todos/epics';\n\nexport default combineEpics(...Object.values(todosEpics));\n","export default { log: console.log };\n","import * as logger from './logger-service';\n\nexport default {\n  logger\n};\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { createEpicMiddleware } from 'redux-observable';\nimport rootReducer from './root-reducer';\nimport rootEpic from \"./root-epics\";\nimport services from \"../services\";\n\nexport const epicMiddleware = createEpicMiddleware({\n  dependencies: services\n})\n\nconst initialState = {};\n\n// create store\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: [epicMiddleware],\n  preloadedState: initialState\n});\n\nepicMiddleware.run(rootEpic)\n\n// export store singleton instance\nexport default store;\n","import React from 'react'\nimport { Item, Progress } from 'semantic-ui-react'\nimport styled from 'styled-components'\n\nconst PlayerItem = styled(Item)`\n  cursor: pointer;\n  user-select: none;\n  border: 1px solid rgba(34,36,38,.15) !important;\n  border-radius: 5px !important;\n  padding: 0.45em !important;\n`\n\nconst PlayerImage = styled(Item.Image)`\n  img {\n    border-radius: 5px !important;\n  }\n`\n\nconst PlayerContent = styled(PlayerItem.Content)`\n  padding-left: 1em !important;\n  padding-right: 0.5em !important;\n`\n\nconst Player = (props) => {\n  const { playerClass } = props\n  return (\n    <PlayerItem key={playerClass.name}>\n      <PlayerImage size='tiny' src={playerClass.image} />\n      <PlayerContent>\n        {/* <PlayerItem.Header></PlayerItem.Header> */}\n        <PlayerItem.Meta>{playerClass.name}</PlayerItem.Meta>\n        <PlayerItem.Description>\n          <Progress progress='ratio' value={900} total={1000} success/>\n        </PlayerItem.Description>\n        {/* <PlayerItem.Extra>Additional Details</PlayerItem.Extra> */}\n      </PlayerContent>\n    </PlayerItem>\n  )\n}\nexport default Player\n","import ROGUE from './darkElfMage.jpg'\nimport MAGE from './elfMage.png'\nimport PRIEST from './priest.jpg'\nimport WARRIOR from './warrior.jpg'\nimport HUNTER from './hunter.jpg'\nimport DRUID from './druid.jpg'\n\nconst Images = Object.freeze({\n  ROGUE,\n  MAGE,\n  PRIEST,\n  WARRIOR,\n  HUNTER,\n  DRUID\n});\n\nexport default Images\n","import Images from \"./images\";\n\nconst PlayerClasses = Object.freeze({\n  WARRIOR: { name: 'Warrior', image: Images.WARRIOR},\n  ROGUE: { name: 'Rogue', image: Images.ROGUE},\n  MAGE: { name: 'Mage', image: Images.MAGE},\n  HUNTER: { name: 'Hunter', image: Images.HUNTER},\n  DRUID: { name: 'Druid', image: Images.DRUID},\n  PRIEST: { name: 'Priest', image: Images.PRIEST},\n});\n\nexport default PlayerClasses\n","import React from 'react'\nimport { Item, Grid, Header, Form, Segment, Message } from 'semantic-ui-react'\nimport Player from '../../player/components/Player'\nimport PlayerClasses from '../../player/playerClasses'\n\nconst Party = () => (\n  <Grid textAlign='center' style={{ height: '100vh' }}>\n    <Grid.Column style={{ maxWidth: 300 }}>\n      <Header as='h2' color='teal' textAlign='center'>\n        Party\n      </Header>\n      <Item.Group>\n        {Object.values(PlayerClasses).map(playerClass => (\n          <Player playerClass={playerClass} />\n        ))}\n      </Item.Group>\n      <Message>\n         [ Healing toolbar here... ]\n      </Message>\n    </Grid.Column>\n  </Grid>\n)\nexport default Party\n","import React from 'react'\nimport { Button } from 'semantic-ui-react'\nimport Party from '../../party/components/Party'\nimport { connect } from 'react-redux'\nimport * as actions from '../actions'\n\nconst mapStateToProps = state => ({\n  todos: state.app.todos,\n})\n\nconst dispatchProps = {\n  addTodo: actions.addTodo,\n  ping: actions.ping,\n}\n\nconst TodosView = props => {\n  const { addTodo, todos, ping } = props\n  return (\n    <Party />\n  )\n}\n\nexport default connect(mapStateToProps, dispatchProps)(TodosView)\n","import React from 'react';\nimport TodosView from '../features/todos/components/TodosView'\nimport './home.css';\n\nfunction Home() {\n  return (\n    <div style={{ padding: '1em' }}>\n      <TodosView />\n    </div>\n  );\n}\n\nexport default Home;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store'\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport Home from './routes/home';\nimport * as serviceWorker from './serviceWorker';\n\nconst Root = () => (\n  <div>\n    <Provider store={store}>\n      <Home />\n    </Provider>\n  </div>\n);\n\nrender(<Root />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}